#user  nobody;

worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
     include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    #sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    #client_max_body_size 10m;
    
    server_names_hash_bucket_size 128;
    client_header_buffer_size 32k;
    large_client_header_buffers 4 32k;
    client_max_body_size 300m;
    sendfile        on;
    tcp_nopush      on;
    proxy_redirect off;
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_connect_timeout 90;
    proxy_send_timeout 90;
    proxy_read_timeout 90;
    proxy_buffer_size 16k;
    proxy_buffers 4 64k;
    proxy_busy_buffers_size 128k;
    proxy_temp_file_write_size 128k;
    #setting cache store path, store method, allocated memory size, max disk size, cache validate time
    proxy_cache_path /var/cache/nginx/proxy_cache levels=1:2 keys_zone=http-cache:500m max_size=10g inactive=30d;
    proxy_temp_path /var/cache/nginx/proxy_cache/tmp;


    upstream tomcat {
         server localhost:8080;
    }

  server {
        listen       	80;
        server_name  	visit.eastech.cn;
	access_log      logs/moecampus_access.log;
        error_log       logs/moecampus_error.log;

          location /console {
                alias  /work/console/;
            index  index.html index.htm;
            }

        location /stage {
                alias /work/qcvisit_homepage/stage;
        }

        location / {
            root   /work/qcvisit_homepage;
            index  index.html index.htm;
        }

       location /lua { 
	     default_type 'text/plain'; 
	     content_by_lua 'ngx.say("hello, lua")'; 
        }


	location ~ \.php$ {
		root    /work/qcvisit_homepage;
     		index  index.html index.htm index.php;
                try_files $uri =404;
                fastcgi_pass  127.0.0.1:9000;
                fastcgi_index index.php;
		fastcgi_param  PATH_INFO $fastcgi_script_name;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                include fastcgi_params;
        }


 location  /qcvisit/ {
          set $cors "true";
            add_header 'Access-Control-Allow-Origin'  '*'  ;            

            if ($request_method = 'OPTIONS') {
                set $cors "${cors}options";  
            }

            if ($request_method = 'GET2') {
                set $cors "${cors}get";  
            }

            if ($request_method = 'POST2') {
                set $cors "${cors}post";
            }
 
            if ($cors = "trueget") {
                add_header 'Access-Control-Allow-Origin' "$http_origin";
                add_header 'Access-Control-Allow-Credentials' 'true';
            }

            if ($cors = "truepost") {
                add_header 'Access-Control-Allow-Origin' "$http_origin";
                add_header 'Access-Control-Allow-Credentials' 'true';
            }

            if ($cors = "trueoptions") {
                add_header 'Access-Control-Allow-Origin' "*";
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since,X-COOLVISIT-TOKEN';
                add_header 'Content-Length' 0;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                return 204;
            }

           proxy_pass http://tomcat;
        }

          location  ~* /group1/M00/ {
                ngx_fastdfs_module;
                set $needCreateImg 0;
               
              
                if ( !-f $request_filename) {
                        set $needCreateImg "${needCreateImg}1";
                }
               
	           
 
                 if ($uri ~* "/group1/M00/(\w+)/(\w+)/([A-Za-z0-9_-]+).(gif|jpg|jpeg|png).(\d+x\d+).(gif|jpg|jpeg|png)") {
                      

			set $needCreateImg "${needCreateImg}2";
                        set $conUri     "/$1/$2/$3.$4.$5.$6";
                }

                if ($needCreateImg = "012") {
        
                        set $conUri     "/$1/$2/$3.$4.$5.$6";               
                        set $image_root "/qicool/data";
                        set $file "$image_root$conUri";
                        set $destPath "$image_root$conUri";
                        set $urlPrefix "/group1/M00";
                        set $destUrl "$urlPrefix$conUri";

                                rewrite_by_lua '
                                local index = string.find(ngx.var.conUri, "([0-9]+)x([0-9]+)");
                                local originalUri = string.sub(ngx.var.conUri, 0, index-2);
                                local area = string.sub(ngx.var.conUri, index);
                                index = string.find(area, "([.])");
                                area = string.sub(area, 0, index-1);

                                function file_exists(name)
                                        local f = io.open(name, "r")
                                        if f~=nil then io.close(f) return true
                                        else
                                                return false
                                        end
                                end

                                function table.contains(table, element)
                                        for _, value in pairs(table) do
                                                if value == element then
                                                        return true
                                                 end
                                       end
                                       return false
                               end

                                if file_exists(ngx.var.destPath) == false  then
                                        local command = "/usr/local/GraphicsMagick/bin/gm convert " .. ngx.var.image_root ..  originalUri  .. " -thumbnail " .. area .. " ".. ngx.var.destPath;
                                        os.execute(command);
                                        --ngx.say("destUrl:"..command);
                                        --ngx.req.set_uri(ngx.var.destUrl,true);
                                else
                                        --ngx.req.set_uri(ngx.var.destUrl,true);
                                end;
                                --local c = "/usr/local/GraphicsMagick/bin/gm convert " .. ngx.var.image_root ..  originalUri  .. " -thumbnail " .. area .. " - ";
                                --local f = assert(io.popen(c, "r"))
                                --local s = assert(f:read("*a"))
                                --f:close()
                                --ngx.say(s)
                                ';
                        }
                        alias /qicool/data;
                }
	}  

}
